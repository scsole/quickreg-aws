#!/bin/bash


verifyCredentials () {
    printf "\nVerifying AWS credentials: "
    aws sts get-caller-identity &> /dev/null
    if [ $? -ne 0 ]; then
        printf "Failed\n    Could not verify your AWS credentials.\nPlease run `aws configure` before proceeding\n"
        exit 1
    else
        printf "OK\n\n"
    fi
}


createKeyPair () {
    KEY_PAIR_NAME="quickreg-kp"
    PRIVATE_KEY_PATH="${HOME}/.ssh/${KEY_PAIR_NAME}.pem"

    if [ -f "$PRIVATE_KEY_PATH" ]; then
        read -p "${PRIVATE_KEY_PATH} already exists. Do you want to overwrite it? [y/N]: " -r 
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            printf "Skipping key pair generation\n\n"
        fi
    else
        printf "Creating key pair: "
        aws ec2 create-key-pair \
            --key-name "$KEY_PAIR_NAME" \
            --query 'KeyMaterial' \
            --output text > "$PRIVATE_KEY_PATH"
        if [[ $? -ne 0 ]]; then
            printf "Please check that ${PRIVATE_KEY_PATH} contains a valid private key.\n"
            exit
        else
            chmod 600 "$PRIVATE_KEY_PATH"
            printf "OK\n"
        fi
        printf "Created key pair: $KEY_PAIR_NAME\n"
    fi
}


initVPC () {
    #
    # Create a VPC with Private and Public Subnets
    #
    # Based off the guide found at:
    #
    # https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Tutorials.WebServerDB.CreateVPC.html
    #
    AVAILABILITY_ZONE="us-east-1"
    VPC_CIDR="10.0.0.0/16"
    VPC_NAME="quickreg-$AVAILABILITY_ZONE-vpc"

    printf "Creating VPC: $VPC_NAME\n\n"

    VPC_ID=`aws ec2 create-vpc \
        --cidr-block ${VPC_CIDR} \
        --query 'Vpc.{VpcId:VpcId}' \
        --output text`

    aws ec2 modify-vpc-attribute \
        --enable-dns-hostnames \
        --vpc-id "$VPC_ID"

    aws ec2 create-tags \
        --resources $VPC_ID \
        --tags Key=Name,Value="$VPC_NAME"

    # TODO: Massive cleanup
    INTERNET_GATEWAY_NAME="internet-gateway-$AVAILABILITY_ZONE-quickreg"
    printf "Creating Internet Gateway: $INTERNET_GATEWAY_NAME\n"
    INTERNET_GATEWAY_ID=`aws ec2 create-internet-gateway \
        --query 'InternetGateway.{InternetGatewayId:InternetGatewayId}' --output text`
    aws ec2 create-tags --resources $INTERNET_GATEWAY_ID \
        --tags Key=Name,Value="$INTERNET_GATEWAY_NAME"
    printf "Attaching Internet Gateway: $INTERNET_GATEWAY_NAME to VPC: $VPC_NAME\n\n"
    aws ec2 attach-internet-gateway --vpc-id $VPC_ID \
        --internet-gateway-id $INTERNET_GATEWAY_ID

    printf "Creating Route Table\n"
    ROUTE_TABLE_ID=`aws ec2 create-route-table --vpc-id $VPC_ID \
        --query 'RouteTable.{RouteTableId:RouteTableId}' --output text`
    ROUTE_TABLE_NAME="route-table-$AVAILABILITY_ZONE-quickreg"
    aws ec2 create-tags --resources $ROUTE_TABLE_ID \
        --tags Key=Name,Value="$ROUTE_TABLE_NAME"
    printf "Creating Route: $ROUTE_TABLE_NAME\n\n"
    ANYWHERE="0.0.0.0/0"
    aws ec2 create-route --route-table-id $ROUTE_TABLE_ID \
        --destination-cidr-block $ANYWHERE --gateway-id $INTERNET_GATEWAY_ID > /dev/null


    SUBNET_NAME_PUBLIC_ONE="subnet-$AVAILABILITY_ZONE-quickreg-public-1"
    printf "Creating subnet: $SUBNET_NAME_PUBLIC_ONE\n"
    SUBNET_CIDR_PUBLIC_ONE="10.0.0.0/24"
    SUBNET_AVAILABILITY_ZONE_PUBLIC_ONE="${AVAILABILITY_ZONE}a"
    SUBNET_ID_PUBLIC_ONE=`aws ec2 create-subnet --cidr-block $SUBNET_CIDR_PUBLIC_ONE \
        --vpc-id $VPC_ID --availability-zone $SUBNET_AVAILABILITY_ZONE_PUBLIC_ONE \
        --query 'Subnet.{SubnetId:SubnetId}' --output text`
    aws ec2 create-tags --resources $SUBNET_ID_PUBLIC_ONE \
        --tags Key=Name,Value="$SUBNET_NAME_PUBLIC_ONE"

    printf "Making subnet: $SUBNET_NAME_PUBLIC_ONE publicly accessible\n\n"
    aws ec2 associate-route-table \
        --route-table-id $ROUTE_TABLE_ID \
        --subnet-id $SUBNET_ID_PUBLIC_ONE > /dev/null

    aws ec2 modify-subnet-attribute \
        --subnet-id $SUBNET_ID_PUBLIC_ONE \
        --map-public-ip-on-launch


    SUBNET_NAME_PRIVATE_ONE="subnet-$AVAILABILITY_ZONE-quickreg-private-1"
    printf "Creating subnet: $SUBNET_NAME_PRIVATE_ONE\n\n"
    SUBNET_CIDR_PRIVATE_ONE="10.0.1.0/24"
    SUBNET_AVAILABILITY_ZONE_PRIVATE_ONE="${AVAILABILITY_ZONE}a"
    SUBNET_ID_PRIVATE_ONE=`aws ec2 create-subnet --cidr-block $SUBNET_CIDR_PRIVATE_ONE \
        --vpc-id $VPC_ID --availability-zone $SUBNET_AVAILABILITY_ZONE_PRIVATE_ONE \
        --query 'Subnet.{SubnetId:SubnetId}' --output text`
    aws ec2 create-tags --resources $SUBNET_ID_PRIVATE_ONE \
        --tags Key=Name,Value="$SUBNET_NAME_PRIVATE_ONE"

    SUBNET_NAME_PRIVATE_TWO="subnet-$AVAILABILITY_ZONE-quickreg-private-2"
    printf "Creating subnet: $SUBNET_NAME_PRIVATE_TWO\n\n"
    SUBNET_CIDR_PRIVATE_TWO="10.0.2.0/24"
    SUBNET_AVAILABILITY_ZONE_PRIVATE_TWO="${AVAILABILITY_ZONE}b"
    SUBNET_ID_PRIVATE_TWO=`aws ec2 create-subnet --cidr-block $SUBNET_CIDR_PRIVATE_TWO \
        --vpc-id $VPC_ID --availability-zone $SUBNET_AVAILABILITY_ZONE_PRIVATE_TWO \
        --query 'Subnet.{SubnetId:SubnetId}' --output text`
    aws ec2 create-tags --resources $SUBNET_ID_PRIVATE_TWO \
        --tags Key=Name,Value="$SUBNET_NAME_PRIVATE_TWO"

    SECURITY_GROUP_WEB_SERVER_NAME="security-group-web-server-quickreg"
    printf "Creating security group: $SECURITY_GROUP_WEB_SERVER_NAME\n\n"
    SECURITY_GROUP_WEB_SERVER_DESCRIPTION="Security Group for EC2 instance running a web server"
    SECURITY_GROUP_WEB_SERVER_ID=`aws ec2 create-security-group \
        --group-name $SECURITY_GROUP_WEB_SERVER_NAME \
        --description "$SECURITY_GROUP_WEB_SERVER_DESCRIPTION" \
        --vpc-id $VPC_ID \
        --query 'GroupId' --output text`
    
    sed -i 's/aws.security_groups =.*$/aws.security_groups = ["'"${SECURITY_GROUP_WEB_SERVER_ID}"'"]/' Vagrantfile
    SECURITY_GROUP_WEB_SERVER_PERMISSIONS_FILE="security-group-web-server-permissions.json"
    aws ec2 authorize-security-group-ingress \
        --group-id $SECURITY_GROUP_WEB_SERVER_ID \
        --ip-permissions file://$SECURITY_GROUP_WEB_SERVER_PERMISSIONS_FILE

    SECURITY_GROUP_DB_NAME="security-group-db-server-quickreg"
    printf "Creating security group: $SECURITY_GROUP_DB_NAME\n\n"
    SECURITY_GROUP_DB_DESCRIPTION="Security Group for RDS running MySQL"
    SECURITY_GROUP_DB_ID=`aws ec2 create-security-group \
        --group-name $SECURITY_GROUP_DB_NAME \
        --description "$SECURITY_GROUP_DB_DESCRIPTION" \
        --vpc-id $VPC_ID \
        --query 'GroupId' --output text`
    sed -i 's/^DB_SECURITY_GROUP=.*$/DB_SECURITY_GROUP='"$SECURITY_GROUP_DB_ID"'/' app/.env
    SECURITY_GROUP_DB_PERMISSIONS_FILE="security-group-db-server-permissions.json"
    aws ec2 authorize-security-group-ingress \
        --group-id $SECURITY_GROUP_DB_ID \
        --ip-permissions file://$SECURITY_GROUP_DB_PERMISSIONS_FILE
	aws ec2 revoke-security-group-egress \
	--group-id $SECURITY_GROUP_DB_ID \
	--ip-permissions '[{"IpProtocol": "-1", "IpRanges": [{"CidrIp": "0.0.0.0/0"}]}]'
    SUBNET_NAME_DB="quickreg-subnet-db"
    sed -i 's/^DB_SUBNET_GROUP=.*$/DB_SUBNET_GROUP='"$SUBNET_NAME_DB"'/' app/.env
    SUBNET_DESCRIPTION_DB="Subnet group for MySQL database"
    printf "Creating DB Subnet group: $SUBNET_NAME_DB\n\n"
    aws rds create-db-subnet-group \
        --db-subnet-group-name $SUBNET_NAME_DB \
        --db-subnet-group-description "Subnet group for MySQL database" \
        --subnet-ids "[\"$SUBNET_ID_PUBLIC_ONE\",\"$SUBNET_ID_PRIVATE_ONE\",\"$SUBNET_ID_PRIVATE_TWO\"]"

    # Update the subnet_id in Vagrantfile, NB: The AVAILABILITY_ZONE_SUBNET_ID may exist in an earlier variable
    sed -i 's/aws.availability_zone =.*$/aws.availability_zone = "'"$SUBNET_AVAILABILITY_ZONE_PUBLIC_ONE"'"/' Vagrantfile
    AVAILABILITY_ZONE_SUBNET_ID=`aws ec2 describe-subnets \
        --filters Name=tag:Name,Values="$SUBNET_NAME_PUBLIC_ONE" \
        --query 'Subnets[].SubnetId' \
        --output text`
    sed -i 's/aws.subnet_id =.*$/aws.subnet_id = "'"$AVAILABILITY_ZONE_SUBNET_ID"'"/' Vagrantfile
}


#
# Perform AWS setup
#
verifyCredentials 
createKeyPair
initVPC
